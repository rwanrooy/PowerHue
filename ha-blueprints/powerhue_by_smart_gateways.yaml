blueprint:
  name: PowerHue - Power-Driven Light Color Change Automation
  description: |


    # **PowerHue - Power-Driven Light Color Change Automation**
    PowerHue changes the color of lights based on power values from a sensor, such as the real-time power level from a [**Smart Meter Gateway**](https://smartgateways.nl/en/read-out-smart-meter-p1-dsmr/) from [**Smart Gateways**](https://smartgateways.nl/en/) or the real-time energy production of solar panels. The light color smoothly transitions between colors based on the power values, providing a visual indication of power consumption or generation. The color starts from **green** when power is low, gradually transitions to **blue**, and shifts to **red** as power consumption or generation reaches its maximum.

    <center>
      <table>
        <tr>
          <td><a href="https://smartgateways.nl/en/" target="_blank"><img src="https://smartgateways.nl/wp-content/uploads/2025/01/PowerHue-logo.png" alt="PowerHue Logo" width="auto" height="150" style="border-radius: 10px;"></a></td>
          <td><a href="https://smartgateways.nl/en/" target="_blank"><img src="https://smartgateways.nl/wp-content/uploads/2020/11/smart-gateways-logo-240x133-1.jpg" alt="Smart Gateways Logo" height="150" style="border-radius: 10px;"></a></td>
        </tr>
      </table>
    </center>

    ### Features:
    - **Dynamic color changes** based on power values (green to blue to red).
    - **Configurable power thresholds** and color settings.
    - **Adjustable update frequency** for smooth transitions.
    - **Rest state configuration** for ambient lighting when power values are low.
    - Separate **brightness settings** for active and rest states.

    ### Requirements:
    - Home Assistant (version 2024 or higher).
    - Compatible light entities that can change color (e.g., RGB lights, Philips HUE, or WLED).
    - A sensor providing real-time power values (e.g., [**Smart Meter**](https://smartgateways.nl/en/read-out-smart-meter-p1-dsmr/) from [**Smart Gateways**](https://smartgateways.nl/en/), solar panel sensor that measures real-time production).

    ### Configuration:
    - **Power Sensor**: The sensor that monitors power values (e.g., a **Smart Meter** or solar panel sensor).
    - **Energy Lights**: The lights that will change color based on power values.
    - **Power Thresholds**: Set the minimum and maximum power levels that the sensor can report. The automation will only work when the sensor values are within this range.
      - **Minimum Power Level**: Minimum power level for the automation to activate.
      - **Maximum Power Level**: Maximum power level for the automation to activate.
    - **Rest Power Levels**: Configure the power levels that correspond to the rest state (when power is low or there's no activity). The light will show a static color (ambient lighting) during this period.
      - **Rest Color**: Color used for ambient lighting during low power periods.
      - **Rest Brightness**: Brightness used for ambient lighting.
    - **Active Mode**: Configure the brightness and update frequency when the light is actively changing based on power consumption.
      - **Active Brightness**: Brightness when the light is actively changing color based on power values.
      - **Update Interval**: Frequency at which the light color will update (in seconds).

    ### Tips for Configuration:
    - It is recommended to adjust the transition time for your lights or LEDs in the configuration for a smooth color transition. 
      For **WLED**, for example, you can configure it via:
      - **Configuration** → **LED & Hardware setup** → **Transitions** → **Default transition time**: 4500 ms (set just below the configured `update_interval`).

    ### Recommended Gateway for your Smart Meter:
    <div style="text-align: left;">
      <a href="https://smartgateways.nl/en/" target="_blank">
        <img src="https://smartgateways.nl/wp-content/uploads/2024/04/Smart-Meter-P1-Gateway-with-google-hub.png" alt="Smart Meter P1 Gateway" height="300" style="border-radius: 10px;">
      </a>
    </div>


    ### License Terms:
    1. This blueprint is free for personal and commercial use.
    2. Modification of the blueprint code is **not allowed**.
    3. Redistribution, republishing, or selling of this blueprint is **strictly prohibited**.
    4. All copyright and license notices must be retained.
    5. The blueprint may only be obtained through official **Smart Gateways** channels.

    **Created by Roel van Wanrooy**  
    Smart Gateways B.V. ([https://smartgateways.nl](https://smartgateways.nl/en))  
    Copyright (c) 2025 Smart Gateways B.V.  
    All rights reserved.






  domain: automation  
  input:  
    power_sensor:  
      name: Power Sensor  
      description: >-  
        Select the sensor that monitors power values. This can be a smart meter   
        power reading or solar panel production sensor. The values from this sensor  
        will determine the light colors.  
      selector:  
        entity:  
          domain: sensor  
    energy_lights:  
      name: Energy Lights  
      description: >-  
        Select the lights that should change color based on the power values.  
        These lights will dynamically show power changes through color transitions.  
        Multiple lights can be selected to create synchronized effects.  
      selector:  
        target:  
          entity:  
            domain: light  
    power_threshold_low:  
      name: Minimum Power Level of Power Sensor  
      description: >-  
        Set the absolute minimum power level that the sensor can report (can be negative).  
        The automation will only work when sensor values are above this threshold.  
        For solar panels, this is typically 0, for smart meters this might be negative  
        to show power consumption. Values below this will not trigger the automation.  
      default: 0  
      selector:  
        number:  
          min: -50000  
          max: 50000  
          step: 1  
          unit_of_measurement: W  
    power_threshold_high:  
      name: Maximum Power Level of Power Sensor  
      description: >-  
        Set the absolute maximum power level that the sensor can report (can be negative).  
        The automation will only work when sensor values are below this threshold.  
        For solar panels, this might be your maximum system capacity. Values above  
        this will not trigger the automation. Ensure this is set higher than your  
        expected maximum power value.  
      default: 1000  
      selector:  
        number:  
          min: -50000  
          max: 50000  
          step: 1  
          unit_of_measurement: W  
    default_power_low:  
      name: Minimum Power Level When Light Has to Be in Rest Color  
      description: >-  
        Lower bound for rest mode activation. When power values are between the minimum  
        and maximum rest levels, the light will use the rest color and brightness.  
        Useful for evening hours when you want ambient lighting despite low/no production.  
        Set this to a value where you want the lights to switch to rest mode.  
      default: 0  
      selector:  
        number:  
          min: -50000  
          max: 50000  
          step: 1  
          unit_of_measurement: W  
    default_power_high:  
      name: Maximum Power Level When Light Has to Be in Rest Color  
      description: >-  
        Upper bound for rest mode activation. When power values exceed this level,  
        the light will start showing dynamic colors based on power values.  
        Set this higher than the minimum rest level but lower than when active  
        color changes should begin. This creates a smooth transition between  
        rest mode and active color changing.  
      default: 50  
      selector:  
        number:  
          min: -50000  
          max: 50000  
          step: 1  
          unit_of_measurement: W  
    rest_color:  
      name: Rest Color  
      description: >-  
        Select the color for the light when in rest mode (between rest power levels).  
        This color will be used for ambient lighting when power values are low,  
        typically during evening hours or periods of low activity. Choose a comfortable  
        color suitable for ambient lighting.  
      default:  
        - 255  
        - 172  
        - 32  
      selector:  
        color_rgb:  
    rest_brightness:  
      name: Rest Brightness  
      description: >-  
        Set the brightness level for rest mode. Consider setting this lower than  
        the active brightness for comfortable ambient lighting during evening hours  
        or periods of low activity. Values range from 0 (off) to 255 (maximum brightness).  
      default: 255  
      selector:  
        number:  
          min: 0  
          max: 255  
          step: 1  
    active_brightness:  
      name: Active Brightness  
      description: >-  
        Set the brightness level for when the light is actively showing power changes.  
        This determines how bright the light will be during dynamic color changes.  
        Usually set higher than rest brightness for better visibility of power changes.  
        Values range from 0 (off) to 255 (maximum brightness).  
      default: 255  
      selector:  
        number:  
          min: 0  
          max: 255  
          step: 1  
    update_interval:  
      name: Update Interval  
      description: >-  
        How frequently the light color should update based on power values.  
        Shorter intervals (like /1 or /5) give more responsive updates but increase system load.  
        Longer intervals (like /30 or /60) are more suitable for slowly changing values.  
      default: "/5"  
      selector:  
        select:  
          options:  
            - "/1"  
            - "/5"  
            - "/10"  
            - "/15"  
            - "/20"  
            - "/25"  
            - "/30"  
            - "/40"  
            - "/50"  
            - "/60"

trigger:  
  - platform: time_pattern  
    seconds: !input update_interval  

variables:  
  power_sensor: !input power_sensor  
  power_threshold_low: !input power_threshold_low  
  power_threshold_high: !input power_threshold_high  
  default_power_low: !input default_power_low  
  default_power_high: !input default_power_high  
  rest_color: !input rest_color  
  rest_brightness: !input rest_brightness  
  active_brightness: !input active_brightness  
  current_power: "{{ states(power_sensor) | float }}"  
  update_interval: !input update_interval  

condition:  
  - condition: template  
    value_template: >-  
      {{ current_power > power_threshold_low and  
         current_power <= power_threshold_high }}  

action:  
  - choose:  
      - conditions:  
          - condition: template  
            value_template: >-  
              {{ current_power >= default_power_low and  
                 current_power < default_power_high }}  
        sequence:  
          - service: light.turn_on  
            target: !input energy_lights  
            data:  
              rgb_color: !input rest_color  
              brightness: !input rest_brightness  
              transition: 4  
      - conditions:  
          - condition: template  
            value_template: >-  
              {{ current_power > power_threshold_low and  
                 current_power <= power_threshold_high }}  
        sequence:  
          - service: light.turn_on  
            target: !input energy_lights  
            data:  
              hs_color:  
                - >-  
                    {{ (120 + ((current_power / power_threshold_high) * 235)) | round(0) }}  
                - 100  
              brightness: !input active_brightness  
              transition: 4  
mode: single
